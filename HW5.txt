By Peter Collins
pmcollins2

1.)
	A.)
	public static double power( double base, int exponent ) {
		if (exponent == 0)
			return 1;
		return base * power(base, exponent - 1);
	}
	B.)
		1.) Problem size:
				N = Exponent value
		2.)	Recurrence equations:
				T(0) = 1
				T(N) = 1 + T(N-1)
		3.) Find a solution by looking for a pattern:
				N	T(N)
				0	1
				1	1 + T(0) = 1 + 1 = 2
				2	1 + T(1) = 1 + 2 = 3
				K	K + 1
			Solution:
				T(K) = K + 1
		4.)	Verify the solution:
				T(N) = 1 + T(N-1)
				N+1	 = 1 + (N-1) + 1
				N+1  = N + 1
		5.)	Complexity:
				O(N)
2.)
	1.) Problem size:
			N = Length of Array
	2.) Recurrence equations:
			T(1) = 1
			T(N) = 1 + T(N/2) + T(N/2)
	3.) Find a solution by looking for a pattern 
			N	T(N)
			1	1
			2 	1 + T(1) + T(1) = 1 + 1 + 1 = 3
			3 	1 + T(1) + T(2) = 1 + 1 + 3 = 5
			4 	1 + T(2) + T(2) = 1 + 3 + 3 = 7
			5 	1 + T(2) + T(3) = 1 + 3 + 5 = 9
			K   (K * 2) - 1
		Solution:
			T(K) = (K * 2) - 1
	4.) Verify the solution:
			T(N) = 1 + T(N/2) + T(N/2)
			(N*2) - 1 = 1 + (((N/2) * 2) - 1) + (((N/2) * 2) - 1)
			(N*2) - 1 = 1 + N-1 + N-1
			(N*2) - 1 = (N*2) - 1
	5.) Complexity:
			O(N)
3.)
	A.)
		If the current position is outside of the array then return.
		If the current position is true then return.
		Otherwise assign the element at the current position true and
			recursively call floodFill in all four adjacent positions
	B.)
	public static void floodFill( boolean[][] pic, int row, int col ) {
		if (row < 0 || row >= pic.length || col < 0 || col >= pic[row].length)
			return;
		else if (pic[row][col] == true)
			return;
		else {
			pic[row][col] = true;
			floodFill(pic, row-1, col);
			floodFill(pic, row+1, col);
			floodFill(pic, row, col-1);
			floodFill(pic, row, col+1);
		}
	}	
			
			