By Peter Collins
pmcollins2

1.)
public static void moveToEnd(int position) {
	// Like the other moveToEnd method throw an exception if the position is too big.
	if (position >= numItems) {
		throw new IndexOutOfBoundsException();
	}
	
	// If the list only has one item or the position is the last, just return
	if (numItems == 1 || position == numItems - 1) {
		return;
	}
	
	// Initialize the current node to the head
	DblListnode<E> currItem = items, itemToAppend;
	for (int i = 0; i < numItems; i++) {	
		// Are we at the position in the chain to select the item we want to move?	
		if (i == position) {
			itemToAppend = currItem;
			// Re-link the next and prev nodes to each other if they exist 
			if (currItem.getPrev() != null && currItem.getNext() != null) {
				currItem.getPrev().setNext(currItem.getNext());
				currItem.getNext().setPrev(currItem.getPrev());
			}
			// Unlink selected node from next if it exists
			// This happens if we're at the head node
			else if (currItem.getNext() != null) {
				items = currItem.getNext();
				items.setPrev(null);
			}
		}
		
		// Is it the last item in the chain?
		if (i == numItems - 1) {
			// Link the selected node with the last
			currItem.setNext(itemToAppend);
			itemToAppend.setPrev(currItem);
			// Remove links to other node from selected node
			itemToAppend.setNext(null);
		} else {
			// Not the last, get the next node in the list.
			currItem = currItem.getNext();
		}
	}	
}

2.)
	For my implementation of the moveToEnd the worst-case time complexity is O(N)
	because at worst and actually in every case, it iterates over the whole chain
	of nodes with the for loop.  I assumed getPrev, getNext, setPrev, setNext were
	all constant time operations because they are just returning or setting
	references to the nodes an O(1) operation.  Other than that comparing integers
	and if an object is null is also a constant time operation. So overall the 
	most expensive, worst case operation is linear time with the for loop or O(N).    