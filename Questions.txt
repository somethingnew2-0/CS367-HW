/***********************************************************************
File:             Questions.txt
Course:           CS 367, Fall 2011

Author:           Peter Collins pcollins2@wisc.edu
CS Login:         pcollins

Completion Date:  12/16/2011
***********************************************************************/

Directions: answer the following five (5) questions.


1) Each sort algorithm is supposed to put the elements of the input
array into ascending order.  How did you test your code to determine
if it did this?

Answer:
    I implemented a testSort method called after every sort implementation
    it displays an error if the sort was in the wrong order.

2) In this question you will run TestSorts four times using the
parameters indicated in the table:

    run 1: 50 123456
    run 2: 500 123456
    run 3: 5000 123456
    run 4: 50000 123456

What are the sort statistics for each of the runs?

Answer:
# items: 50     random seed: 123456

algorithm        data compares     data moves   milliseconds
---------        -------------     ----------   ------------
selection                1,225            284              0
insertion                  720            773              1
merge                      221            572              0
quick                      273            354              0
heap                       419            732              0
shaker                   1,015          2,025              0
2-way insertion            447            515              0

# items: 500     random seed: 123456

algorithm        data compares     data moves   milliseconds
---------        -------------     ----------   ------------
selection              124,750          4,053              2
insertion               65,195         65,700              3
merge                    3,857          8,976              1
quick                    4,874          4,353              0
heap                     7,684         12,807              1
shaker                  99,099        194,106              3
2-way insertion         43,775         44,432              3

# items: 5,000     random seed: 123456

algorithm        data compares     data moves   milliseconds
---------        -------------     ----------   ------------
selection           12,497,500         49,208            137
insertion            6,213,696      6,218,701             90
merge                   55,230        123,616              4
quick                   65,256         55,944              3
heap                   110,702        179,472             14
shaker               9,321,040     18,626,109            199
2-way insertion      4,171,550      4,177,731             76

# items: 50,000     random seed: 123456

algorithm        data compares     data moves   milliseconds
---------        -------------     ----------   ------------
selection        1,249,975,000        621,564         15,621
insertion          625,067,014    625,117,021         10,686
merge                  718,101      1,568,928             57
quick                  850,529        677,112             20
heap                 1,440,693      2,294,244             37
shaker             940,057,144  1,875,051,069         21,011
2-way insertion    417,389,924    417,452,143          6,035


3) In this question you again will run TestSorts four times using the
parameters indicated in the table:

    run 5: 1000 13579
    run 6: 1000 13579
    run 7: 1000 13579
    run 8: 1000 13579

What are the sort statistics for each of the runs?

Answer:

# items: 1,000     random seed: 13579

algorithm        data compares     data moves   milliseconds
---------        -------------     ----------   ------------
selection              499,500          8,554              8
insertion              249,135        250,143              4
merge                    8,695         19,952              1
quick                   10,034          9,519              0
heap                    17,416         28,728              3
shaker                 370,214        744,435              9
2-way insertion        163,272        164,521              4

# items: 1,000     random seed: 13579

algorithm        data compares     data moves   milliseconds
---------        -------------     ----------   ------------
selection              499,500          8,554              7
insertion              249,135        250,143              4
merge                    8,695         19,952              1
quick                   10,034          9,519              1
heap                    17,416         28,728              3
shaker                 370,214        744,435              8
2-way insertion        163,272        164,521              4

# items: 1,000     random seed: 13579

algorithm        data compares     data moves   milliseconds
---------        -------------     ----------   ------------
selection              499,500          8,554              7
insertion              249,135        250,143              5
merge                    8,695         19,952              1
quick                   10,034          9,519              0
heap                    17,416         28,728              3
shaker                 370,214        744,435              9
2-way insertion        163,272        164,521              4

# items: 1,000     random seed: 13579

algorithm        data compares     data moves   milliseconds
---------        -------------     ----------   ------------
selection              499,500          8,554              7
insertion              249,135        250,143              5
merge                    8,695         19,952              2
quick                   10,034          9,519              1
heap                    17,416         28,728              3
shaker                 370,214        744,435              8
2-way insertion        163,272        164,521              4


4) In this question you will run TestSorts four times using the
parameters indicated in the table:

    run  9: 4000 43210
    run 10: 4000 43210
    run 11: 4000 43210
    run 12: 4000 43210

- For run 9 you will use the TestSorts program as originally written.

- For run 10 you will modify the TestSorts program so that instead of
  creating an input array of random integers, it creates an input
  array that is already in ascending order.  The easiest way to do
  this is to replace the line:

      arr[k] = new InstrumentedInt(random.nextInt());

  with the line:

      arr[k] = new InstrumentedInt(k);

- For run 11 you will modify the TestSorts program so that it creates
  an input array that is already in descending order. The easiest way
  to do this is to replace the line:

      arr[k] = new InstrumentedInt(random.nextInt());

  with the line:

      arr[k] = new InstrumentedInt(arrSize - k);

- For run 12 you will modify the TestSorts program so that it creates
  an input array that contains the same value in every position. The 
  easiest way to do this is to replace the line:

      arr[k] = new InstrumentedInt(random.nextInt());

  with the line:

      arr[k] = new InstrumentedInt(1);

What are the sort statistics for each of the runs?

Answer:

# items: 4,000     random seed: 43210

algorithm        data compares     data moves   milliseconds
---------        -------------     ----------   ------------
selection            7,998,000         39,545             92
insertion            4,038,687      4,042,694             58
merge                   42,840         95,808              3
quick                   50,669         43,758              2
heap                    85,618        138,837              8
shaker               6,024,909     12,104,088            123
2-way insertion      2,635,618      2,640,670             39

# items: 4,000     random seed: 43210

algorithm        data compares     data moves   milliseconds
---------        -------------     ----------   ------------
selection            7,998,000         12,000             89
insertion                3,999          7,998              0
merge                   24,176         95,808              2
quick                   43,915         11,712              1
heap                   117,933        239,505              8
shaker                   3,999              0              0
2-way insertion          5,998          7,996              1

# items: 4,000     random seed: 43210

algorithm        data compares     data moves   milliseconds
---------        -------------     ----------   ------------
selection            7,998,000      4,012,000             96
insertion            7,998,000      8,005,998            109
merge                   23,728         95,808              3
quick                   66,085         29,685              2
heap                    81,599        124,311              9
shaker               7,998,000     23,994,000            164
2-way insertion          5,998         13,996              1

# items: 4,000     random seed: 43210

algorithm        data compares     data moves   milliseconds
---------        -------------     ----------   ------------
selection            7,998,000         12,000             87
insertion                3,999          7,998              0
merge                   23,728         95,808              3
quick                   42,223         66,120              2
heap                    11,994         12,000              2
shaker                   3,999              0              0
2-way insertion          5,998          7,996              1


5) Briefly analyze your results from questions 2, 3, and 4.  Your
analysis should consider the following:

    - Are your results are consistent with the complexities of the
      sorting algorithms (as derived in class and homework 8)?

    - How does the size of the input array affect a sort's performance
      relative to other sorts?

    - How does the order of values in the input array (runs 9-12) affect
      a sort's performance relative to other sorts?

    - Which of the statistics (compares, data moves, time) provides
      the most useful information for determining the efficiency of a
      sort?

You should back up your analysis with examples and specific references
to your results.

Answer:

Yes, the worst case complexities for all the implemented sort algorithms are given here:
    Selection: O(N^2)
    Insertion: O(N^2)
    Merge:  O(NLOGN)
    Quick:  O(N^2) (Avg. O(NLOGN)
    Heap:   O(NLOGN)
    Shaker: O(N^2)
    2-Way Insertion: O(N^2)
This means the algorithms follow the number of data comparisons or 
data moves by the given function where N is the size of the array. In runs 1 through 4
this is seen as consistent with results because for O(N^2) algorithms the data
comparisons and data movements are all around or below 2500, 250000, 25000000, and 2500000000
for runs 1, 2, 3, and 4 respectively.  Likewise for O(N LOG N) algorithms data
comparisons and data movements are all around 195, 3107, 42585, 540988 due to coefficients.
In runs 5 through 8 consistency is shown in the algorithms where the results for data
comparisons and movements are the same.  The run 10 shows the best case for 
most of the algorithms except selection, merge, quick, and heap sort as expected. The
run 11 show the worst case for the selection, insertion, and shaker sort as expected.
Finally the run 12 shows that selection sort as expected has a complexity of O(N^2). 

Increasing a size of the input array as shown in runs 1 through 4 shows that the sort's
performance increases relative to it's complexity as given by the table above.

As stated above putting all the values in order in run 10 made the all the algorithms
save for selection sort complete quickly.  In reverse order for run 11the selection sort, 
insertion sort, and shaker sort demonstrated worst case behavior.  When all the values
were the same only selection sort similar to when they were descending showed worst case
behavior.

The useful statistic is time because it shows clearly which algorithm outperforms others
in different scenarios quickly and clearly.  Data comparisons and data movements 
show how the underlying algorithms works and is split in work, but the time gives
a complete overview.

 